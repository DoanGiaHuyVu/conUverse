<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social Media Frontend Test</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .post {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .post-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .post-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
            background-color: #ddd;
            object-fit: cover;
        }
        .post-author {
            font-weight: bold;
        }
        .post-time {
            color: #666;
            font-size: 0.9em;
            margin-left: 10px;
        }
        .post-content {
            margin-bottom: 15px;
            line-height: 1.5;
        }
        .post-image {
            max-width: 100%;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        .post-actions {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }
        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            color: #666;
        }
        .action-btn:hover {
            color: #333;
        }
        .comments-section {
            margin-top: 15px;
            border-top: 1px solid #eee;
            padding-top: 15px;
        }
        .comment {
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #f0f0f0;
        }
        .comment-author {
            font-weight: bold;
            font-size: 0.9em;
        }
        .comment-content {
            margin-top: 5px;
        }
        .login-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        input, button {
            padding: 8px 12px;
            margin-right: 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .error {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Social Media Test Frontend</h1>
    
    <div class="login-section">
        <h2>Login</h2>
        <input type="text" id="login-email" placeholder="Email">
        <input type="password" id="login-password" placeholder="Password">
        <button onclick="login()">Login</button>
        <button onclick="register()">Register</button>
        <div id="login-error" class="error"></div>
    </div>

    <div id="posts-container"></div>

    <script>
        // Global variables
        let currentUser = null;
        const API_BASE_URL = 'http://localhost:5000'; // Update if your Flask runs on different port

        // DOM Elements
        const postsContainer = document.getElementById('posts-container');
        const loginError = document.getElementById('login-error');

        // Fetch all posts from API
        async function fetchPosts() {
            try {
                const response = await fetch(`${API_BASE_URL}/posts`);
                if (!response.ok) throw new Error('Failed to fetch posts');
                return await response.json();
            } catch (error) {
                console.error('Error fetching posts:', error);
                return { posts: [] };
            }
        }

        // Render posts to the page
        async function renderPosts() {
            const data = await fetchPosts();
            postsContainer.innerHTML = '';

            if (data.posts && data.posts.length > 0) {
                data.posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.className = 'post';
                    postElement.innerHTML = `
                        <div class="post-header">
                            <img src="${post.author.profile_pic || 'https://via.placeholder.com/40'}" class="post-avatar" alt="Profile">
                            <div>
                                <span class="post-author">${post.author.username}</span>
                                <span class="post-time">${new Date(post.created_at).toLocaleString()}</span>
                            </div>
                        </div>
                        <div class="post-content">${post.content}</div>
                        ${post.image_url ? `<img src="${post.image_url}" class="post-image" alt="Post image">` : ''}
                        <div class="post-actions">
                            <button class="action-btn" onclick="handleLike(${post.id})">
                                ‚ù§Ô∏è Like (${post.likes.length})
                            </button>
                            <button class="action-btn" onclick="focusComment(${post.id})">
                                üí¨ Comment (${post.comments.length})
                            </button>
                        </div>
                        <div class="comments-section" id="comments-${post.id}">
                            <h3>Comments</h3>
                            ${post.comments.map(comment => `
                                <div class="comment">
                                    <div class="comment-author">${comment.author.username}</div>
                                    <div class="comment-content">${comment.content}</div>
                                </div>
                            `).join('')}
                            <div class="add-comment">
                                <input type="text" id="comment-input-${post.id}" placeholder="Add a comment">
                                <button onclick="addComment(${post.id})">Post</button>
                            </div>
                        </div>
                    `;
                    postsContainer.appendChild(postElement);
                });
            } else {
                postsContainer.innerHTML = '<p>No posts found. Create one!</p>';
            }
        }

        // Login function
        async function login() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;

            try {
                const response = await fetch(`${API_BASE_URL}/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });

                const data = await response.json();
                if (response.ok) {
                    currentUser = data;
                    localStorage.setItem('authToken', data.access_token);
                    loginError.textContent = '';
                    renderPosts();
                } else {
                    loginError.textContent = data.error || 'Login failed';
                }
            } catch (error) {
                loginError.textContent = 'Network error';
                console.error('Login error:', error);
            }
        }

        // Register function
        async function register() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            const username = email.split('@')[0];

            try {
                const response = await fetch(`${API_BASE_URL}/register`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password, username })
                });

                const data = await response.json();
                if (response.ok) {
                    loginError.textContent = 'Registration successful! Please login';
                } else {
                    loginError.textContent = data.error || 'Registration failed';
                }
            } catch (error) {
                loginError.textContent = 'Network error';
                console.error('Registration error:', error);
            }
        }

        // Like a post
        async function handleLike(postId) {
            if (!currentUser) {
                loginError.textContent = 'Please login to like posts';
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/posts/${postId}/like`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (response.ok) {
                    renderPosts(); // Refresh posts
                }
            } catch (error) {
                console.error('Like error:', error);
            }
        }

        // Add comment to a post
        async function addComment(postId) {
            if (!currentUser) {
                loginError.textContent = 'Please login to comment';
                return;
            }

            const commentInput = document.getElementById(`comment-input-${postId}`);
            const content = commentInput.value.trim();

            if (!content) return;

            try {
                const response = await fetch(`${API_BASE_URL}/posts/${postId}/comments`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    },
                    body: JSON.stringify({ content })
                });

                if (response.ok) {
                    commentInput.value = '';
                    renderPosts(); // Refresh posts
                }
            } catch (error) {
                console.error('Comment error:', error);
            }
        }

        // Focus comment input
        function focusComment(postId) {
            const commentInput = document.getElementById(`comment-input-${postId}`);
            if (commentInput) commentInput.focus();
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            const token = localStorage.getItem('authToken');
            if (token) {
                // Try to validate token and load user
                // You would need a /me endpoint in your Flask API
            }
            renderPosts();
        });
    </script>
</body>
</html>